# Spotify
Automation Testing
Spotify Application Automation
Overview:
This project seeks to automate testing of the Spotify Android application using Selenium Web Driver and Appium. The automation scripts are tailored to interact with the Spotify app's UI elements.
Prerequisites:
Before running the automation scripts, ensure the following prerequisites are fulfilled:
Appium Server: Install and configure the Appium server on your machine, available for download from the Appium Official Website.
Android SDK: Install the Android SDK on your machine and configure necessary environment variables. Ensure the required Android SDK tools and platform-tools are installed.
Spotify Application: Install the Spotify application on your Android device or emulator from the Google Play Store.
Java Development Kit (JDK): Install JDK version 8 or higher on your machine.
IDE: Install an Integrated Development Environment (IDE) like Eclipse or IntelliJ IDEA for Java development.
	Use appium inspector to inspect elements 
Getting Started: Follow these steps to set up the project and execute the automation scripts:
Clone the repository to your local machine:
git clone https://github.com/yourusername/spotify.git
Open the project in your preferred IDE.
Review and adjust the desired capabilities in the automation script (SpotifyTest.java) to match your testing environment. Update the device Name, appPackage, and appActivity as required.
Execute the automation script (SpotifyTest.java) to run the automated tests.


Test Scenarios: 
The automation scripts encompass various test scenarios, including:
Unable to login due to security flags on Spotify application 
•	Logout functionality
•	Searching for songs, artists, and albums
•	Playing, pausing songs
•	Navigating through different sections of the app
Feel free to extend the test coverage by adding more test scenarios as necessary.
Test Reporting: 
The project generates comprehensive test reports using testing frameworks like TestNG or JUnit. These reports provide insights into test execution results, encompassing pass/fail status, execution time, and encountered issues.

 
Contributor:
HINA Tariq
